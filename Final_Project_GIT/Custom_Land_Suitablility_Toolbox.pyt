# -*- coding: utf-8 -*-# GEOG 676: Group 9 , Team Leader: Joe Johnson# Project Title: A GIS-based Visualization of Pollution and Community Park Land Suitability Analysis in Harris County, Texas#Import packagesimport arcpyimport osimport timefrom arcpy.sa import *# Check out any necessary licenses.arcpy.CheckOutExtension("spatial")arcpy.CheckOutExtension("3D")arcpy.CheckOutExtension("ImageAnalyst")class Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Community Park Land Suitability tool by Group9"        self.description = "A GIS-based Visualization of Pollution and Community Park Land Suitability Analysis in Harris County, Texas. Prepared by Group9, GEOG676-Fall2023, TL: Joe Johnson."        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(displayName="work GDB folder path", name="GDBfolderpath", datatype="DEFolder", parameterType="Required", direction="Input")        param1 = arcpy.Parameter(displayName="work GDB Name", name="GDB_Name", datatype="GPString", parameterType="Required", direction="Input")        param2 = arcpy.Parameter(displayName="Harris Population layer path", name="poplulationfileaddress", datatype="GPFeatureLayer", parameterType="Required", direction="Input")        #param3 = arcpy.Parameter(displayName="Harris County Boundary layer path", name="Harris_County_Boundary", datatype="GPFeatureLayer", parameterType="Required", direction="Input")        param3 = arcpy.Parameter(displayName="Undeveloped Land Harris layer path", name="Undeveloped_Land_Harris", datatype="GPFeatureLayer", parameterType="Required", direction="Input")        param4 = arcpy.Parameter(displayName="Super Industry layer path", name="superfund_npl_Harris", datatype="GPFeatureLayer", parameterType="Required", direction="Input")        param5 = arcpy.Parameter(displayName="Facilities layer path", name="facilities_all_Harris", datatype="GPFeatureLayer", parameterType="Required", direction="Input")        param6 = arcpy.Parameter(displayName="Oil Refineries layer path", name="Oil_Refineries_Harris", datatype="GPFeatureLayer", parameterType="Required", direction="Input")        param7 = arcpy.Parameter(displayName="Fracking wells layer path", name="Fracking_wells_Harris", datatype="GPFeatureLayer", parameterType="Required", direction="Input")        param8 = arcpy.Parameter(displayName="Existing Parks layer path", name="Existing_Parks_Harris", datatype="GPFeatureLayer", parameterType="Required", direction="Input")                param9 = arcpy.Parameter(displayName="Sentinel Band1 Methane raster path", name="Sentinel_B1_CH4_Harris_tif", datatype="GPRasterLayer", parameterType="Required", direction="Input")        param10 = arcpy.Parameter(displayName="EPA AirToxicity raster path", name="EPA_Air_Toxicity_Cancer_Harris_tif", datatype="GPRasterLayer", parameterType="Required", direction="Input")        param11 = arcpy.Parameter(displayName="Heat Severity raster path", name="Heat_Sererity_Unit_Harris_tif", datatype="GPRasterLayer", parameterType="Required", direction="Input")        param12 = arcpy.Parameter(displayName="Average PM2.5 raster path", name="PM2_5_Avg_2016_tif", datatype="GPRasterLayer", parameterType="Required", direction="Input")                #param14 = arcpy.Parameter(displayName="Buffer radius (Miles) for industries and oil related installations", name="bufferRadius1", datatype="GPDouble", parameterType="Required", direction="Input")        #param15 = arcpy.Parameter(displayName="Buffer radius (Miles) for existing park", name="bufferRadius2", datatype="GPDouble", parameterType="Required", direction="Input")        #param16 = arcpy.Parameter(displayName="Population filter value", name="poplulationfilter", datatype="GPDouble", parameterType="Required", direction="Input")        params = [param0, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12]#, param14, param15, param16] #param3,        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        # Define our progressor variables        readTime = 2.5        start = 0        maximum = 100        step = 20        # Setup the progressor        arcpy.SetProgressor("step", "Checking project and layer...", start, maximum, step)        time.sleep(readTime)        # Add message to the results pane        arcpy.AddMessage("Checking project and layer...")                GDB_Folder = parameters[0].valueAsText        GDB_Name = parameters[1].valueAsText        popln_layer_Harris = parameters[2].valueAsText        #Harris_County_Boundary = parameters[3].valueAsText        Undeveloped_Land_Harris = parameters[3].valueAsText        superfund_npl_Harris = parameters[4].valueAsText        facilities_all_Harris = parameters[5].valueAsText        Oil_Refineries_Harris = parameters[6].valueAsText        Fracking_wells_Harris = parameters[7].valueAsText        Existing_Parks_Harris = parameters[8].valueAsText        Sentinel_B1_CH4_Harris_tif = parameters[9].valueAsText        EPA_Air_Toxicity_Cancer_Harris_tif = parameters[10].valueAsText        Heat_Sererity_Unit_Harris_tif = parameters[11].valueAsText        PM2_5_Avg_2016_tif = parameters[12].valueAsText        #bufferRadius1 = parameters[14].valueAsText        #bufferRadius2 = parameters[15].valueAsText        #poplulationfilter = parameters[16].valueAsText                # Setup the progressor        arcpy.SetProgressor("step", "Setting up environment and workspace...", start, maximum, step)        time.sleep(readTime)        # Add message to the results pane        arcpy.AddMessage("Setting up environment and workspace...")        WorkGDB = GDB_Name + ".gdb"        database = os.path.join(GDB_Folder, WorkGDB)        arcpy.env.overwriteOutput = True        if arcpy.Exists(database):            pass        else:            arcpy.CreateFileGDB_management(GDB_Folder, WorkGDB)                #Set the workspace        arcpy.env.workspace = database        arcpy.env.overwriteOutput = False        #Increment the progressor and change the label; add message to the results pane        arcpy.SetProgressorPosition(start + step)        arcpy.SetProgressorLabel("Analysis of vector data...")        time.sleep(readTime)        arcpy.AddMessage("Analysis of vector data...")        # Process: Make Feature Layer (Make Feature Layer) (management)        Population_GT_10K_layer = "Population_GT_10K_layer"        arcpy.management.MakeFeatureLayer(in_features=popln_layer_Harris, out_layer=Population_GT_10K_layer, where_clause="POP2010 >= 10000")        # Process: Intersect (Intersect) (analysis)        Population_undeveloped_land_Intersect = database + "/Population_undeveloped_land_Intersect"        with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):            arcpy.analysis.Intersect(in_features=[[Population_GT_10K_layer, ""], [Undeveloped_Land_Harris, ""]], out_feature_class=Population_undeveloped_land_Intersect)        # Process: Merge (Merge) (management)        Output_Dataset = database + "/facilities_all_Harris_Merge"        with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):            arcpy.management.Merge(inputs=[facilities_all_Harris, Oil_Refineries_Harris, superfund_npl_Harris, Fracking_wells_Harris], output=Output_Dataset, field_mappings="FACN \"FACN\" true true false 15 Text 0 0,First,#,facilities_all_Harris,FACN,0,15;FRSID \"FRSID\" true true false 12 Text 0 0,First,#,facilities_all_Harris,FRSID,0,12;FIPS \"FIPS\" true true false 5 Text 0 0,First,#,facilities_all_Harris,FIPS,0,5,superfund_npl_Harris,FIPS,0,5;REF_ID \"REF_ID\" true true false 20 Text 0 0,First,#,Oil_Refineries_Harris,REF_ID,0,20;NAME \"NAME\" true true false 150 Text 0 0,First,#,Oil_Refineries_Harris,NAME,0,150,superfund_npl_Harris,NAME,0,80,Fracking_wells_Harris,Name,0,8000;ADDRESS \"ADDRESS\" true true false 150 Text 0 0,First,#,Oil_Refineries_Harris,ADDRESS,0,150,superfund_npl_Harris,ADDRESS,0,40;CITY \"CITY\" true true false 50 Text 0 0,First,#,Oil_Refineries_Harris,CITY,0,50,superfund_npl_Harris,CITY,0,24;STATE \"STATE\" true true false 50 Text 0 0,First,#,Oil_Refineries_Harris,STATE,0,50,superfund_npl_Harris,STATE,0,2,Fracking_wells_Harris,State,0,8000;ZIP \"ZIP\" true true false 15 Text 0 0,First,#,Oil_Refineries_Harris,ZIP,0,15,superfund_npl_Harris,ZIP,0,10;ZIP4 \"ZIP4\" true true false 15 Text 0 0,First,#,Oil_Refineries_Harris,ZIP4,0,15;TELEPHONE \"TELEPHONE\" true true false 50 Text 0 0,First,#,Oil_Refineries_Harris,TELEPHONE,0,50;TYPE \"TYPE\" true true false 85 Text 0 0,First,#,Oil_Refineries_Harris,TYPE,0,85,Fracking_wells_Harris,Type,0,8000;STATUS \"STATUS\" true true false 25 Text 0 0,First,#,Oil_Refineries_Harris,STATUS,0,25;POPULATION \"POPULATION\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,POPULATION,-1,-1;COUNTY \"COUNTY\" true true false 50 Text 0 0,First,#,Oil_Refineries_Harris,COUNTY,0,50,superfund_npl_Harris,COUNTY,0,40;COUNTYFIPS \"COUNTYFIPS\" true true false 20 Text 0 0,First,#,Oil_Refineries_Harris,COUNTYFIPS,0,20;COUNTRY \"COUNTRY\" true true false 15 Text 0 0,First,#,Oil_Refineries_Harris,COUNTRY,0,15;LATITUDE \"LATITUDE\" true true false 8 Double 0 0,First,#,Oil_Refineries_Harris,LATITUDE,-1,-1;LONGITUDE \"LONGITUDE\" true true false 8 Double 0 0,First,#,Oil_Refineries_Harris,LONGITUDE,-1,-1;NAICS_CODE \"NAICS_CODE\" true true false 50 Text 0 0,First,#,Oil_Refineries_Harris,NAICS_CODE,0,50;NAICS_DESC \"NAICS_DESC\" true true false 50 Text 0 0,First,#,Oil_Refineries_Harris,NAICS_DESC,0,50;SOURCE \"SOURCE\" true true false 200 Text 0 0,First,#,Oil_Refineries_Harris,SOURCE,0,200;SOURCEDATE \"SOURCEDATE\" true true false 8 Date 0 0,First,#,Oil_Refineries_Harris,SOURCEDATE,-1,-1;VAL_METHOD \"VAL_METHOD\" true true false 85 Text 0 0,First,#,Oil_Refineries_Harris,VAL_METHOD,0,85;VAL_DATE \"VAL_DATE\" true true false 8 Date 0 0,First,#,Oil_Refineries_Harris,VAL_DATE,-1,-1;WEBSITE \"WEBSITE\" true true false 500 Text 0 0,First,#,Oil_Refineries_Harris,WEBSITE,0,500;OWNER \"OWNER\" true true false 75 Text 0 0,First,#,Oil_Refineries_Harris,OWNER,0,75;OPERNAME \"OPERNAME\" true true false 75 Text 0 0,First,#,Oil_Refineries_Harris,OPERNAME,0,75;RMP_ID \"RMP_ID\" true true false 15 Text 0 0,First,#,Oil_Refineries_Harris,RMP_ID,0,15;EPA_ID \"EPA_ID\" true true false 15 Text 0 0,First,#,Oil_Refineries_Harris,EPA_ID,0,15,superfund_npl_Harris,EPA_ID,0,12;POSREL \"POSREL\" true true false 50 Text 0 0,First,#,Oil_Refineries_Harris,POSREL,0,50;CAPACITY \"CAPACITY\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,CAPACITY,-1,-1;US_RANK \"US_RANK\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,US_RANK,-1,-1;CRUDE \"CRUDE\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,CRUDE,-1,-1;VACDIST \"VACDIST\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,VACDIST,-1,-1;COKING \"COKING\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,COKING,-1,-1;THERMALOP \"THERMALOP\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,THERMALOP,-1,-1;CATCRACK \"CATCRACK\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,CATCRACK,-1,-1;CATREFORM \"CATREFORM\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,CATREFORM,-1,-1;CATHYDCRCK \"CATHYDCRCK\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,CATHYDCRCK,-1,-1;CATHYDTRT \"CATHYDTRT\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,CATHYDTRT,-1,-1;ALKY \"ALKY\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,ALKY,-1,-1;POLDIM \"POLDIM\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,POLDIM,-1,-1;AROMATIC \"AROMATIC\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,AROMATIC,-1,-1;ISOMER \"ISOMER\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,ISOMER,-1,-1;LUBES \"LUBES\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,LUBES,-1,-1;OXYGENATES \"OXYGENATES\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,OXYGENATES,-1,-1;HYDRGN \"HYDRGN\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,HYDRGN,-1,-1;COKE \"COKE\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,COKE,-1,-1;SULFUR \"SULFUR\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,SULFUR,-1,-1;ASPHALT \"ASPHALT\" true true false 4 Long 0 0,First,#,Oil_Refineries_Harris,ASPHALT,-1,-1;SITE_ID \"SITE_ID\" true true false 7 Text 0 0,First,#,superfund_npl_Harris,SITE_ID,0,7;LATD \"LATD\" true true false 4 Float 0 0,First,#,superfund_npl_Harris,LATD,-1,-1;LONGD \"LONGD\" true true false 4 Float 0 0,First,#,superfund_npl_Harris,LONGD,-1,-1;NPLSTAT \"NPLSTAT\" true true false 1 Text 0 0,First,#,superfund_npl_Harris,NPLSTAT,0,1;STATUS_DAT \"STATUS_DAT\" true true false 20 Text 0 0,First,#,superfund_npl_Harris,STATUS_DAT,0,20;HRS \"HRS\" true true false 4 Float 0 0,First,#,superfund_npl_Harris,HRS,-1,-1")        # Process: Buffer (2) (Buffer) (analysis)        facilities_all_Harris_Buffer = database + "/facilities_all_Harris_Buffer"        with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):            arcpy.analysis.Buffer(in_features=Output_Dataset, out_feature_class=facilities_all_Harris_Buffer, buffer_distance_or_field= "2 Miles", dissolve_option="ALL")        # Process: Buffer (Buffer) (analysis)        Existing_Parks_Harris_Buffer = database + "/Existing_Parks_Harris_Buffer"        with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):            arcpy.analysis.Buffer(in_features=Existing_Parks_Harris, out_feature_class=Existing_Parks_Harris_Buffer, buffer_distance_or_field= "0.5 Miles", dissolve_option="ALL")        # Process: Union (Union) (analysis)        facilities_all_Harris_Union = database + "/facilities_all_Harris_Union"        with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):            arcpy.analysis.Union(in_features=[[facilities_all_Harris_Buffer, ""], [Existing_Parks_Harris_Buffer, ""]], out_feature_class=facilities_all_Harris_Union, gaps="NO_GAPS")        # Process: Erase (Erase) (analysis)        Population_undeveloped_facilities_Erase = database + "/Population_undeveloped_facilities_Erase"        with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):            arcpy.analysis.Erase(in_features=Population_undeveloped_land_Intersect, erase_features=facilities_all_Harris_Union, out_feature_class=Population_undeveloped_facilities_Erase)        #Increment the progressor and change the label; add message to the results pane        arcpy.SetProgressorPosition(start + step + step)        arcpy.SetProgressorLabel("start to fuzzify the raster layers...")        time.sleep(readTime)        arcpy.AddMessage("start to fuzzify the raster layers...")        # Process: Fuzzy Membership (Fuzzy Membership) (sa)        FuzzyMF_EPA = database + "/FuzzyMF_EPA"        Fuzzy_Membership = FuzzyMF_EPA        FuzzyMF_EPA = arcpy.sa.FuzzyMembership(EPA_Air_Toxicity_Cancer_Harris_tif, FuzzyLinear(0, 255))        FuzzyMF_EPA.save(Fuzzy_Membership)        #with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):        #    FuzzyMF_EPA = arcpy.sa.FuzzyMembership(EPA_Air_Toxicity_Cancer_Harris_tif, [["LINEAR", 0, 255]], "NONE")        #    FuzzyMF_EPA.save(Fuzzy_Membership)        # Process: Fuzzy Membership (2) (Fuzzy Membership) (sa)        FuzzyMF_Heat = database + "/FuzzyMF_Heat"        Fuzzy_Membership_2_ = FuzzyMF_Heat        FuzzyMF_Heat = arcpy.sa.FuzzyMembership(Heat_Sererity_Unit_Harris_tif, FuzzyLinear(0, 245))        FuzzyMF_Heat.save(Fuzzy_Membership_2_)        #with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):        #    FuzzyMF_Heat = arcpy.sa.FuzzyMembership(Heat_Sererity_Unit_Harris_tif, [["LINEAR", 0, 245]], "NONE")        #    FuzzyMF_Heat.save(Fuzzy_Membership_2_)        # Process: Fuzzy Membership (3) (Fuzzy Membership) (sa)        FuzzyMF_PM25 = database + "/FuzzyMF_PM25"        Fuzzy_Membership_3_ = FuzzyMF_PM25        FuzzyMF_PM25 = arcpy.sa.FuzzyMembership(PM2_5_Avg_2016_tif, FuzzyLinear(5.7755103111267, 8.9484844207764))        FuzzyMF_PM25.save(Fuzzy_Membership_3_)        #with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):        #    FuzzyMF_PM25 = arcpy.sa.FuzzyMembership(PM2_5_Avg_2016_tif, [["LINEAR", 5.7755103111267, 8.9484844207764]], "NONE")        #    FuzzyMF_PM25.save(Fuzzy_Membership_3_)        # Process: Fuzzy Membership (4) (Fuzzy Membership) (sa)        FuzzyMF_CH4 = database + "/FuzzyMF_CH4"        Fuzzy_Membership_4_ = FuzzyMF_CH4        FuzzyMF_CH4 = arcpy.sa.FuzzyMembership(Sentinel_B1_CH4_Harris_tif, FuzzyLinear(0, 234))        FuzzyMF_CH4.save(Fuzzy_Membership_4_)        #with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):        #    FuzzyMF_CH4 = arcpy.sa.FuzzyMembership(Sentinel_B1_CH4_Harris_tif, [["LINEAR", 0, 234]], "NONE")        #    FuzzyMF_CH4.save(Fuzzy_Membership_4_)        #Increment the progressor and change the label; add message to the results pane        arcpy.SetProgressorPosition(start + step + step + step + step)        arcpy.SetProgressorLabel("Overlay fuzzified raster layers...")        time.sleep(readTime)        arcpy.AddMessage("Overlay fuzzified raster layers...")        # Process: Fuzzy Overlay (Fuzzy Overlay) (sa)        FuzzyOverlay_layer = database + "/FuzzyOverlay_layer"        Fuzzy_Overlay = FuzzyOverlay_layer        FuzzyOverlay_layer = arcpy.sa.FuzzyOverlay([FuzzyMF_EPA, FuzzyMF_Heat, FuzzyMF_PM25, FuzzyMF_CH4], "AND", 0.9)        FuzzyOverlay_layer.save(Fuzzy_Overlay)        #with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):        #    FuzzyOverlay_layer = arcpy.sa.FuzzyOverlay([FuzzyMF_EPA, FuzzyMF_Heat, FuzzyMF_PM25, FuzzyMF_CH4], "AND", 0.9)        #    FuzzyOverlay_layer.save(Fuzzy_Overlay)        # Process: Rescale by Function (Rescale by Function) (sa)        Rescale_OverlayFuzzy = database + "/Rescale_OverlayFuzzy"        Rescale_by_Function = Rescale_OverlayFuzzy        Rescale_OverlayFuzzy = arcpy.sa.RescaleByFunction(FuzzyOverlay_layer, TfLinear(0, 7, "#", "#", "#", "#"), 1, 200)        Rescale_OverlayFuzzy.save(Rescale_by_Function)        # Process: Int (Int) (3d)        OverlayFuzzy_Rescale_to_Int = database + "/OverlayFuzzy_Rescale_to_Int"        arcpy.ddd.Int(in_raster_or_constant=Rescale_OverlayFuzzy, out_raster=OverlayFuzzy_Rescale_to_Int)        OverlayFuzzy_Rescale_to_Int = arcpy.Raster(OverlayFuzzy_Rescale_to_Int)        #with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):        #    arcpy.ddd.Int(in_raster_or_constant=Rescale_OverlayFuzzy, out_raster=OverlayFuzzy_Rescale_to_Int)        #    OverlayFuzzy_Rescale_to_Int = arcpy.Raster(OverlayFuzzy_Rescale_to_Int)        # Process: Raster to Polygon (Raster to Polygon) (conversion)        OverlayFuzzyRaster_to_Polygon = database + "/OverlayFuzzyRaster_to_Polygon"        with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]", outputMFlag="Disabled", outputZFlag="Disabled"):            arcpy.conversion.RasterToPolygon(in_raster=OverlayFuzzy_Rescale_to_Int, out_polygon_features=OverlayFuzzyRaster_to_Polygon)        # Process: Erase (2) (Erase) (analysis)        Final_Suitable_land_regions = database + "/Final_Suitable_land_regions"        with arcpy.EnvManager(outputCoordinateSystem="PROJCS[\"WGS_1984_UTM_Zone_14N\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"False_Easting\",500000.0],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-99.0],PARAMETER[\"Scale_Factor\",0.9996],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]"):            arcpy.analysis.Erase(in_features=Population_undeveloped_facilities_Erase, erase_features=OverlayFuzzyRaster_to_Polygon, out_feature_class=Final_Suitable_land_regions)        # Process: Make Feature Layer (2) (Make Feature Layer) (management)        Final_btw30_150Acres_suitable_regions = "Final_btw30_150Acres_suitable_regions"        arcpy.management.MakeFeatureLayer(in_features=Final_Suitable_land_regions, out_layer=Final_btw30_150Acres_suitable_regions, where_clause="Shape_Area >= 210 And Shape_Area < 1000")        #Increment the progressor and change the label; add message to the results pane        arcpy.SetProgressorPosition(maximum)        arcpy.SetProgressorLabel("saving project...")        time.sleep(readTime)        arcpy.AddMessage("saving project...")        arcpy.AddMessage("Done!")                return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return